# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы
# сотрудника. В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

script_name, working_out, rate, prize = argv

print('Выработка в часах: ', working_out)
print('Ставка в часах: ', rate)
print('Премия: ', prize)

result = (int(working_out) * int(rate) + int(prize))
print(f'Заработная плата: {result}')

# python 4.py 8 500 100

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

my_list = [5, 76, 6, 14, 3, 28, 342, 4, 1, 45, 99]
new_list = [el for el in my_list if el > my_list[my_list.index(el)-1]]
print(f'Исходный список: {my_list}')
print(f'Новый список: {new_list}')

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

print(sorted(el for el in (list(range(20, 240))) if el % 20 == 0 or el % 21 == 0))

# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

my_list = [3, 45, 6, 41, 3, 45, 653, 3, 15, 45, 99, 32, 87, 6]
new_list = [el for el in my_list if my_list.count(el) == 1]
print(f'Исходный список: {my_list}')
print(f'Новый список: {new_list}')

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

print(reduce(lambda prev_el, el: prev_el * el, (el for el in (list(range(100, 1001))) if el % 2 == 0)))


# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие,
# при котором повторение элементов списка будет прекращено.

from itertools import count, cycle

for el in count(5):
    if el > 25:
        break
    else:
        print(el)

my_list = ['red', 'green', 'yellow', 'blue']
elem = 0
for el in cycle(my_list):
    if elem > 11:
        break
    print(el)
    elem += 1


# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial

def factorial_numb():
    """Функция отвечает за получение факториала числа"""
    n = 0
    while n < 10:
        factorial(n)
        n += 1
        yield factorial(n)

fact = factorial_numb()

for el in fact:
    print(el)



